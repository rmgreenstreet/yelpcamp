const mongoose 		= require("mongoose")
const Campground 	= require("./models/campground.js");
const Comment   	= require("./models/comment.js");
const User   	= require("./models/user.js");
const fs = require('fs');
const faker = require('faker');
const parks = require('./parks.js');
const cloudinary = require('cloudinary');
const async = require('async');

//path to filler/stock images to use for posts
const seedImages = 'public/img/seed';
let imageArray = [];
let imageObj = {}

async function gatherImages () {
	//look in that directory and for each file, add the path to an array
	fs.readdir(seedImages, (err, files) => {
		if(err) {
			return console.error('could not read the source directory: ',err);
		}
		files.forEach(file => {
			console.log(file);
			imageArray.push('/img/seed/'+file);
		});
		console.log('imageArray populated with '+imageArray.length+' images');
	});
}

async function listCloudinaryImages () {
	try {
		imageObj = await cloudinary.v2.search
		.expression('folder:seed')
		.sort_by('public_id','desc')
		.execute();
		console.log(imageObj);
		return imageObj;
	}
	catch(err) {
		console.log(err);
	}
}

	

//called within seedPosts function: delete all users (except you/admin) and generate 50 more
async function generateUsers() {
	console.log('creating 50 users');
	try {
		//change the username key to the username you want to keep
		await User.deleteMany({});
		const robert = await User.register({username:'robert',email:'robertgreenstreet@gmail.com',image:{url:'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'}},'password');
		let potatohead = await User.register({username:'potatohead',email:'potatohead@gmail.com',image:{url:'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'}},'password');
		let somethingwicked = await User.register({username:'somethingwicked',email:'somethingwicked@gmail.com',image:{url:'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'}},'thiswaycomes');
		potatohead.followers.push(robert._id);
		potatohead.save();
		somethingwicked.followers.push(robert._id);
		somethingwicked.save();
		console.log('all current users deleted');
	}
	catch (err) {
		console.log(err);
	}
	try {
		//register 50 new users with random usernames and passwords generated by faker
		//originally had some errors thrown because faker has a limited selection of first names, so concatenated first and last names
		for (let i = 0;i < 50;i++) {
		const user = await User.register({username:(faker.name.firstName()+faker.name.lastName()),email:faker.internet.email(),image:{url:'https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png'}},faker.internet.password());
		console.log(`user ${i+1}, username: ${user.username} registered`);
		}
		console.log('50 users registered');
	}
	catch (err) {
		console.log(err);
	}
};

//called within the seedDb function for each campground, generate between 1 and 5 reviews, with between 1 and 5 stars each
async function generateComments(campground, users) {
	//.ceil() used to make sure at least one rating was created
	const randomCommentCount = Math.ceil(Math.random() * 5);
	console.log(`creating ${randomCommentCount} Comments for ${campground.name}`);
	try {
		for(let i = 0;i < randomCommentCount;i++){
			console.log(`creating Comment # ${i+1} for campground '${campground.name}'`);
			//choose a random user from all users (including you) as the author
			const randomUserIndex = Math.floor(Math.random() *users.length);
			let commentData = {
				body:faker.lorem.paragraph(),
				author:users[randomUserIndex]._id
			}
			const newComment = await Comment.create(commentData);
			console.log(`comment # ${i+1} added to campground`)
			campground.comments.push(newComment);
		}
		await campground.save();
	}
	catch (err) {
		console.log(err);
	}
};

async function seedDb() {
	try {

		await listCloudinaryImages();
		// await gatherImages();
		// await generateUsers();
		//find all users to be used as authors for posts/reviews
		const allUsers = await User.find({});
		// console.log(allUsers);
		console.log(`${allUsers.length} users found`);
		//decide how many posts between 100 and 500 to create
		const numberOfPosts = Math.floor(Math.random()*(200-100) +100);
		console.log(`creating ${numberOfPosts} campgrounds`);
		//delete all existing posts
		await Campground.deleteMany({});
		console.log('all posts removed');
		for(const i of new Array(numberOfPosts)) {
			//choose which of the 1000 parks in the parks.js file to use to create the post location
			const random1000 = Math.floor(Math.random() * parks.length);
			//choose which of the 50 users to set as the author
			const randomUserIndex = Math.floor(Math.random() * allUsers.length);
			const randomImageIndex = Math.floor(Math.random() * imageObj.resources.length);
			const name = faker.commerce.productName();
			const description = faker.lorem.text();
			const price = faker.commerce.price();
			const campgroundData = {
				name,
				description,
				price,
				image:{
					url:imageObj.resources[randomImageIndex].secure_url
				},
				location: `${parks[random1000].city}, ${parks[random1000].state}`,
				lat:parks[random1000].latitude,
				lng:parks[random1000].longitude,
				author: {id:allUsers[randomUserIndex]._id,username:allUsers[randomUserIndex].username},
			}
			let campground = new Campground(campgroundData);
			//generate comments, passing in the new campground itself and the array of all users
			await generateComments(campground,allUsers);
			await campground.save();
		}
		console.log(`${numberOfPosts} campgrounds created`);
	}
	catch (err) {
		console.log(err);
	}
	
}
 
module.exports = seedDb;